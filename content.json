{"meta":{"title":"Macix's Awesome Site","subtitle":"Nothing","description":null,"author":"Macix","url":"http://melifesoftware.github.io","root":"/"},"pages":[{"title":"about","date":"2019-04-09T08:26:45.000Z","updated":"2019-04-09T08:56:34.922Z","comments":true,"path":"about/index.html","permalink":"http://melifesoftware.github.io/about/index.html","excerpt":"","text":"为什么写这个Blog以前确实还是很天真，觉得自己的记忆力很好，写过的代码可以过目不忘，就没怎么进行记录，就算记录也是流水账类型的，不长久，过不多久就忘了。而且学的东西太多太杂，知识的广度有了，但所有的东西都没有涉及到一定的深度，知识不成体系，后面项目用到的话还是需要重新学习，成本太高。 自我介绍一个奋斗在考研前线的计算机考研狗。 此博客诞生于一个不想看书的下午…."}],"posts":[{"title":"【AI学习笔记1】Numpy 学习记录","slug":"【AI学习笔记1】Numpy-学习记录","date":"2019-04-09T09:12:06.000Z","updated":"2019-04-09T09:49:14.314Z","comments":true,"path":"2019/04/09/【AI学习笔记1】Numpy-学习记录/","link":"","permalink":"http://melifesoftware.github.io/2019/04/09/【AI学习笔记1】Numpy-学习记录/","excerpt":"","text":"导入matplotlib 并 在线绘图 123import mathplotlib.pyplot as plotimport numpy as np%matplotlib online ## 在线绘图 numpy numpy库的常用函数 1234567891011121314151617# 数学函数np.sin() #计算矩阵每个值 的sin,并返回，矩阵的shape 不变np.cos() #类似sin# 生成常用arraynp.repeat(1, 10) # 产生有10个1 的 arraynp.arange() #产生一个 行数为 n 的array, 可以设置起始和结束以及步长np.arange() # 生成按顺序的1行矩阵np.eye() #生成单位阵np.empty()#创建一个空阵np.diag([1,2,3]) #从一个一维矩阵创建一个对角阵, 对角线上为 1,2,3np.linespace(0, 2*np.pi,100) #创建在一个范围内均分的矩阵,在 0 到 2pi 范围内均匀取 100个点# ndarray对象常用操作方法 ndarray是 numpy 返回的 用于表示矩阵的对象，但其实是数组 numpy提供专有的matrix 对象，matrix 可以 求 逆矩阵，共轭矩阵， 1234567891011121314arr = np.arange(100) #构造一个 1 行 100 列的矩阵，从 0 到 100arr.resharp(2, 50) #将 arr 变换成 2 行 50 列的矩阵,当已经指定行时 列的值可以设置为-1，这样会自动计算需要的列数arr.shape #arr 的形状arr.size #arr 所占用的空间arr.dtype #arr 的数据类型 # 数据类型转换 不能直接修改 dtype , dtype 只是一个标记 表明以何种类型显示内存中的数据# 比如 float32 类型的转换为 int8 后 size会增加4倍arr.astype(np.float32)#arr 的数据类型转换为 float32# 转换成矩阵mat = np.asmatrix(arr)arr.T #取转置，# numpy 的 matrix对象操作 1234567891011121314mat = np.matrix('1,2,3;1,2,3') #从字符串创建一个矩阵'''输出, 2行3列的矩阵matrix([[1, 2, 3], [1, 2, 3]])'''mat.I #矩阵的逆阵mat.H #矩阵的共轭mat.T #矩阵的转置# 矩阵的算术操作# + - * # 矩阵转换为数组arr = np.asarray(mat)","categories":[],"tags":[{"name":"DL","slug":"DL","permalink":"http://melifesoftware.github.io/tags/DL/"}]},{"title":"post title","slug":"post-title","date":"2019-04-08T16:35:55.000Z","updated":"2019-04-08T16:38:29.990Z","comments":true,"path":"2019/04/09/post-title/","link":"","permalink":"http://melifesoftware.github.io/2019/04/09/post-title/","excerpt":"","text":"hello","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://melifesoftware.github.io/tags/python/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-04-08T16:32:03.795Z","updated":"2019-04-08T16:32:03.795Z","comments":true,"path":"2019/04/09/hello-world/","link":"","permalink":"http://melifesoftware.github.io/2019/04/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}